version: '3.8'

services:
  # Frontend - Next.js
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:3001
      - NEXT_PUBLIC_AI_SERVICE_URL=http://ai-service:8000
      - NEXT_PUBLIC_MAPBOX_TOKEN=${MAPBOX_TOKEN}
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - uber-eats-network

  # Backend - NestJS
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - PORT=3001
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/ubereats
      - MONGODB_URI=mongodb://mongo:27017/ubereats
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - mongo
      - redis
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - uber-eats-network

  # AI/ML Service - FastAPI
  ai-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - HUGGINGFACE_TOKEN=${HUGGINGFACE_TOKEN}
    volumes:
      - ./ai-service:/app
    networks:
      - uber-eats-network

  # PostgreSQL Database
  postgres:
    image: postgres:15
    environment:
      - POSTGRES_DB=ubereats
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - uber-eats-network

  # MongoDB Database
  mongo:
    image: mongo:7
    environment:
      - MONGO_INITDB_DATABASE=ubereats
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
      - ./database/mongo/init.js:/docker-entrypoint-initdb.d/init.js:ro
    networks:
      - uber-eats-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - uber-eats-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker-configs/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
      - backend
      - ai-service
    networks:
      - uber-eats-network

volumes:
  postgres_data:
  mongo_data:
  redis_data:

networks:
  uber-eats-network:
    driver: bridge